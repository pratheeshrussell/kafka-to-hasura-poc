input:
  resource: kafka_service
pipeline:
  processors:
    - switch:
        - check: 'this.quote != null && this.quote != "" '
          processors:
            - resource: pg_quote_insert
          fallthrough: false
        - check: 'this.quote == null || this.quote == "" '
          processors:
            - label: error_simulator
              bloblang: |
                throw("Quote is required")
          fallthrough: false

output:
  label: handle_output
  switch:
    cases:
      - check: errored()
        output:
          processors:
           - mapping: |
              root.payload = this
              root.error = error()
          resource: kafka_dlq
      - output:
          drop: {}
input_resources:
  - label: kafka_service
    kafka:
      addresses:
        - ${RPC_KAFKA_BROKER}
      topics:
        - ${RPC_KAFKA_TOPIC}
      consumer_group: rpc_group
      start_from_oldest: true
processor_resources:
  - label: pg_quote_insert
    sql_insert:
      driver: postgres
      dsn: ${RPC_PG_DATABASE_URL}
      table: public."Quotes"
      columns:
        - quote
      args_mapping: root = [this.quote]
output_resources:
  - label: kafka_dlq
    kafka:
      addresses:
        - ${RPC_KAFKA_BROKER}
      topic: quotes_dlq
      key: Error
      custom_topic_creation:
        enabled: true
      max_retries: 2
